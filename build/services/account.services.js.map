{"version":3,"sources":["../../server/services/account.services.js"],"names":["AccountService","id","Accounts","find","account","owner","accountExist","err","error","accountDetails","UserServices","getUser","email","loggedInUser","getAccount","accountNumber","type","balance","newAccount","createdOn","status","push","response","firstName","lastName","openingBalance","reqAccount","acc","parseInt","splice"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;IAMMA,c;;;;;;;;;;AACJ;;;;;;;;;;oDAOwBC,E;;;;;;;;uBAESC,qBAASC,IAAT,CAAc,UAAAC,OAAO;AAAA,yBAAIA,OAAO,CAACC,KAAR,KAAkBJ,EAAtB;AAAA,iBAArB,C;;;AAAvBK,gBAAAA,Y;iDACCA,Y;;;;;AAEDC,gBAAAA,G,GAAM;AAAEC,kBAAAA,KAAK,EAAE;AAAT,iB;sBACND,G;;;;;;;;;;;;;;;;AAGV;;;;;;;;;;;;;qDAQ2BE,c;;;;;;;;uBAEIC,iBAAaC,OAAb,CAAqBF,cAAc,CAACG,KAApC,C;;;AAArBC,gBAAAA,Y;;oBACDA,Y;;;;;kDACI,K;;;;uBAEkB,KAAKC,UAAL,CAAgBD,YAAY,CAACZ,EAA7B,C;;;AAArBK,gBAAAA,Y;;qBACFA,Y;;;;;kDACK,K;;;;uBAEmB,6BAAY,CAAZ,C;;;AAAtBS,gBAAAA,a;+BAGGF,YAAY,CAACZ,E;;uBACH,6B;;;;+BACXQ,cAAc,CAACO,I;+BAEZP,cAAc,CAACQ,O;+BACxBF,a;AANIG,gBAAAA,U;AACJb,kBAAAA,K;AACAc,kBAAAA,S;AACAH,kBAAAA,I;AACAI,kBAAAA,M,EAAQ,Q;AACRH,kBAAAA,O;AACAF,kBAAAA,a;;;AAGFb,qCAASmB,IAAT,CAAcH,UAAd;;AAEMI,gBAAAA,Q,GAAW;AACfP,kBAAAA,aAAa,EAAbA,aADe;AAEfQ,kBAAAA,SAAS,EAAEV,YAAY,CAACU,SAFT;AAGfC,kBAAAA,QAAQ,EAAEX,YAAY,CAACW,QAHR;AAIfZ,kBAAAA,KAAK,EAAEC,YAAY,CAACD,KAJL;AAKfI,kBAAAA,IAAI,EAAEE,UAAU,CAACF,IALF;AAMfS,kBAAAA,cAAc,EAAEP,UAAU,CAACD;AANZ,iB;kDASVK,Q;;;;;AAEDf,gBAAAA,G,GAAM;AAAEC,kBAAAA,KAAK,EAAE;AAAT,iB;sBACND,G;;;;;;;;;;;;;;;;AAIV;;;;;;;;;;;;;qDAO0BH,O,EAASH,E;;;;;;AAC3ByB,gBAAAA,U,GAAaxB,qBAASC,IAAT,CAAc,UAAAwB,GAAG;AAAA,yBAAIC,QAAQ,CAACD,GAAG,CAACZ,aAAL,EAAoB,EAApB,CAAR,KAAoCa,QAAQ,CAAC3B,EAAD,EAAK,EAAL,CAAhD;AAAA,iBAAjB,C;;oBACdyB,U;;;;;kDACI,K;;;AAETA,gBAAAA,UAAU,CAACN,MAAX,GAAoBhB,OAAO,CAACgB,MAA5B;kDACOM,U;;;;;;;;;;;;;;;;AAGT;;;;;;;;;;;;;qDAO2BzB,E;;;;;;AACnByB,gBAAAA,U,GAAaxB,qBAASC,IAAT,CAAc,UAAAwB,GAAG;AAAA,yBAAIC,QAAQ,CAACD,GAAG,CAACZ,aAAL,EAAoB,EAApB,CAAR,KAAoCa,QAAQ,CAAC3B,EAAD,EAAK,EAAL,CAAhD;AAAA,iBAAjB,C;;oBACdyB,U;;;;;kDACI,K;;;AAETxB,qCAAS2B,MAAT,CAAgBH,UAAU,CAACzB,EAAX,GAAgB,CAAhC,EAAmC,CAAnC;;kDACOC,oB;;;;;;;;;;;;;;;;;;;;eAKIF,c","sourcesContent":["import UserServices from './user.services';\r\nimport Users from '../utils/db/users.data';\r\nimport Accounts from '../utils/db/accounts.data';\r\nimport generateBAN from '../utils/generateBAN';\r\nimport getdate from '../utils/dateFormat';\r\n/**\r\n *\r\n * @class AccountService\r\n *\r\n */\r\n\r\nclass AccountService {\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AccountService\r\n    * @returns {Boolean} accountExist\r\n    *\r\n    */\r\n  static async getAccount(id) {\r\n    try {\r\n      const accountExist = !!await Accounts.find(account => account.owner === id);\r\n      return accountExist;\r\n    } catch (e) {\r\n      const err = { error: 'An error while trying get account' };\r\n      throw err;\r\n    }\r\n  }\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AccountService\r\n    * @returns {Object} createdAccount\r\n    *\r\n    */\r\n\r\n  static async createAccount(accountDetails) {\r\n    try {\r\n      const loggedInUser = await UserServices.getUser(accountDetails.email);\r\n      if (!loggedInUser) {\r\n        return false;\r\n      }\r\n      const accountExist = await this.getAccount(loggedInUser.id);\r\n      if (accountExist) {\r\n        return false;\r\n      }\r\n      const accountNumber = await generateBAN(8);\r\n\r\n      const newAccount = {\r\n        owner: loggedInUser.id,\r\n        createdOn: await getdate(),\r\n        type: accountDetails.type,\r\n        status: 'Active',\r\n        balance: accountDetails.balance,\r\n        accountNumber,\r\n      };\r\n\r\n      Accounts.push(newAccount);\r\n\r\n      const response = {\r\n        accountNumber,\r\n        firstName: loggedInUser.firstName,\r\n        lastName: loggedInUser.lastName,\r\n        email: loggedInUser.email,\r\n        type: newAccount.type,\r\n        openingBalance: newAccount.balance,\r\n      };\r\n\r\n      return response;\r\n    } catch (e) {\r\n      const err = { error: 'An error while trying create account user' };\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AccountService\r\n    * @returns {Object} reqAccount\r\n    *\r\n    */\r\n  static async patchAccount(account, id) {\r\n    const reqAccount = Accounts.find(acc => parseInt(acc.accountNumber, 10) === parseInt(id, 10));\r\n    if (!reqAccount) {\r\n      return false;\r\n    }\r\n    reqAccount.status = account.status;\r\n    return reqAccount;\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AccountService\r\n    * @returns {Object} Accounts\r\n    *\r\n    */\r\n  static async deleteAccount(id) {\r\n    const reqAccount = Accounts.find(acc => parseInt(acc.accountNumber, 10) === parseInt(id, 10));\r\n    if (!reqAccount) {\r\n      return false;\r\n    }\r\n    Accounts.splice(reqAccount.id - 1, 1);\r\n    return Accounts;\r\n  }\r\n\r\n}\r\n\r\nexport default AccountService;\r\n"],"file":"account.services.js"}