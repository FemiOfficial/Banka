{"version":3,"sources":["../../server/services/user.auth.services.js"],"names":["AuthService","user","checkEmail","Users","find","data","email","userLength","length","lastId","id","isAdmin","type","push","generateSignUpToken","authToken","response","token","firstName","lastName","password","err","error","login","loginUser","generateSignInToken","authUser","TokenOperations","config","secretKey"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport Users from '../utils/db/users.data';\r\nimport TokenOperations from '../helpers/tokenOperations';\r\nimport config from '../config/config';\r\n\r\n/**\r\n *\r\n * @class AuthService\r\n *\r\n */\r\n\r\nclass AuthService {\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AuthService\r\n    * @returns {Object} response\r\n    *\r\n    */\r\n\r\n  static async createUser(user) {\r\n    try {\r\n      const checkEmail = Users.find(data => data.email === user.email);\r\n\r\n      if (checkEmail) {\r\n        return false;\r\n      }\r\n      const userLength = Users.length;\r\n\r\n      const lastId = Users[userLength - 1].id;\r\n\r\n      user.id = lastId + 1;\r\n\r\n      user.isAdmin = false;\r\n\r\n      user.type = 'Client';\r\n\r\n      Users.push(user);\r\n\r\n      const authToken = await this.generateSignUpToken(user);\r\n\r\n      const response = {\r\n        token: authToken,\r\n        id: user.id,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        email: user.email,\r\n        password: user.password,\r\n      };\r\n\r\n      return response;\r\n    } catch (e) {\r\n      const err = { error: 'An error error while trying create new user' };\r\n\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AuthService\r\n    * @returns {Object} loginUser\r\n    *\r\n    */\r\n  static async login(login) {\r\n    try {\r\n      const loginUser = Users\r\n        .find(user => user.email === login.email && user.password === login.password);\r\n      if (loginUser) {\r\n        const token = await this.generateSignInToken(loginUser);\r\n        const response = {\r\n          token,\r\n          id: loginUser.id,\r\n          firstName: loginUser.firstName,\r\n          lastName: loginUser.lastName,\r\n          email: loginUser.email,\r\n        };\r\n        return response;\r\n      }\r\n\r\n      return false;\r\n    } catch (e) {\r\n      const err = { error: 'An error while trying login user' };\r\n\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AuthService\r\n    * @returns {Object} authToken\r\n    *\r\n    */\r\n  static async generateSignUpToken(user) {\r\n    const authUser = {\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      password: user.password,\r\n    };\r\n\r\n    const token = await TokenOperations.token(authUser, config.secretKey);\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AuthService\r\n    * @returns {Object} authToken\r\n    *\r\n    */\r\n  static async generateSignInToken(user) {\r\n    const authUser = {\r\n      email: user.email,\r\n      password: user.password,\r\n      id: user.id,\r\n      type: user.type,\r\n      isAdmin: user.isAdmin,\r\n\r\n    };\r\n\r\n    const authToken = await TokenOperations.token(authUser, config.secretKey);\r\n    return authToken;\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\n"],"file":"user.auth.services.js"}