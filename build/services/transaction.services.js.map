{"version":3,"sources":["../../server/services/transaction.services.js"],"names":["TransactionServices","id","transaction","transactionsLength","Transactions","length","lastId","parseInt","type","accountNumber","createdOn","account","Accounts","find","acc","oldBalance","parseFloat","balance","amount","newBalance","push","transactionId","cashier","transactionType","accountBalance"],"mappings":"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","sourcesContent":["import getdate from '../utils/dateFormat';\r\nimport Accounts from '../utils/db/accounts.data';\r\nimport Transactions from '../utils/db/transactions.data';\r\n\r\n/**\r\n *\r\n * @class TransactionServices\r\n *\r\n */\r\nclass TransactionServices {\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof TransactionServices\r\n    * @returns {Object} debitTransaction\r\n    *\r\n    */\r\n\r\n  static async makeDebitTransaction(id, transaction) {\r\n    const transactionsLength = Transactions.length;\r\n\r\n    const lastId = Transactions[transactionsLength - 1].id;\r\n\r\n    transaction.id = parseInt(lastId + 1, 10);\r\n\r\n    transaction.type = 'debit';\r\n\r\n    transaction.accountNumber = parseInt(id, 10);\r\n\r\n    transaction.createdOn = await getdate();\r\n\r\n    const account = Accounts.find(acc => acc.accountNumber === parseInt(id, 10));\r\n\r\n    if (!account) {\r\n      return false;\r\n    }\r\n\r\n    transaction.oldBalance = parseFloat(account.balance, 10);\r\n\r\n    account.balance -= transaction.amount;\r\n\r\n    transaction.newBalance = parseFloat(account.balance, 10);\r\n\r\n    Transactions.push(transaction);\r\n\r\n    return {\r\n      transactionId: transaction.id,\r\n      accountNumber: transaction.accountNumber,\r\n      amount: parseFloat(transaction.amount, 10),\r\n      cashier: parseInt(transaction.cashier, 10),\r\n      transactionType: 'debit',\r\n      accountBalance: transaction.newBalance,\r\n    };\r\n  }\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof TransactionServices\r\n    * @returns {Object} creditTransaction\r\n    *\r\n    */\r\n\r\n  static async makeCreditTransaction(id, transaction) {\r\n    const transactionsLength = Transactions.length;\r\n\r\n    const lastId = Transactions[transactionsLength - 1].id;\r\n\r\n    transaction.id = parseInt(lastId + 1, 10);\r\n\r\n    transaction.type = 'credit';\r\n\r\n    transaction.accountNumber = parseInt(id, 10);\r\n\r\n    transaction.createdOn = await getdate();\r\n\r\n    const account = Accounts.find(acc => acc.accountNumber === parseInt(id, 10));\r\n\r\n    if (!account) {\r\n      return false;\r\n    }\r\n\r\n    transaction.oldBalance = parseFloat(account.balance, 10);\r\n\r\n    account.balance += transaction.amount;\r\n\r\n    transaction.newBalance = parseFloat(account.balance, 10);\r\n\r\n    Transactions.push(transaction);\r\n\r\n    return {\r\n      transactionId: transaction.id,\r\n      accountNumber: transaction.accountNumber,\r\n      amount: parseFloat(transaction.amount, 10),\r\n      cashier: parseInt(transaction.cashier, 10),\r\n      transactionType: 'credit',\r\n      accountBalance: transaction.newBalance,\r\n    };\r\n  }\r\n}\r\n\r\nexport default TransactionServices;\r\n"],"file":"transaction.services.js"}