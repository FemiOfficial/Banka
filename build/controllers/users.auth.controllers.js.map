{"version":3,"sources":["../../server/controllers/users.auth.controllers.js"],"names":["UserControllers","req","res","AuthService","createUser","body","data","status","statusCodes","conflict","json","errors","created","serverError","error","login","unAuthorized","success"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;IAMMA,e;;;;;;;;;;AACJ;;;;;;;;;;;oDAQwBC,G,EAAKC,G;;;;;;;;uBAENC,qBAAYC,UAAZ,CAAuBH,GAAG,CAACI,IAA3B,C;;;AAAbC,gBAAAA,I;;oBACDA,I;;;;;iDACIJ,GAAG,CAACK,MAAJ,CAAWC,wBAAYC,QAAvB,EAAiCC,IAAjC,CACL;AACEH,kBAAAA,MAAM,EAAEC,wBAAYC,QADtB;AAEEE,kBAAAA,MAAM,EAAE;AAFV,iBADK,C;;;iDAOFT,GAAG,CAACK,MAAJ,CAAWC,wBAAYI,OAAvB,EAAgCF,IAAhC,CACL;AACEH,kBAAAA,MAAM,EAAEC,wBAAYI,OADtB;AAEEN,kBAAAA,IAAI,EAAJA;AAFF,iBADK,C;;;;;iDAOAJ,GAAG,CAACK,MAAJ,CAAWC,wBAAYK,WAAvB,EAAoCH,IAApC,CACL;AACEI,kBAAAA,KAAK,EAAE;AADT,iBADK,C;;;;;;;;;;;;;;;;AAQX;;;;;;;;;;;;;;qDAQuBb,G,EAAKC,G;;;;;;;;uBAELC,qBAAYY,KAAZ,CAAkBd,GAAG,CAACI,IAAtB,C;;;AAAbC,gBAAAA,I;;oBACDA,I;;;;;kDACIJ,GAAG,CAACK,MAAJ,CAAWC,wBAAYQ,YAAvB,EAAqCN,IAArC,CACL;AACEH,kBAAAA,MAAM,EAAEC,wBAAYQ,YADtB;AAEEF,kBAAAA,KAAK,EAAE;AAFT,iBADK,C;;;kDAOFZ,GAAG,CAACK,MAAJ,CAAWC,wBAAYS,OAAvB,EAAgCP,IAAhC,CACL;AACEH,kBAAAA,MAAM,EAAEC,wBAAYS,OADtB;AAEEX,kBAAAA,IAAI,EAAJA;AAFF,iBADK,C;;;;;kDAOAJ,GAAG,CAACK,MAAJ,CAAWC,wBAAYK,WAAvB,EAAoCH,IAApC,CAAyC;AAAEI,kBAAAA,KAAK,EAAE;AAAT,iBAAzC,C;;;;;;;;;;;;;;;;;;;;eAKEd,e","sourcesContent":["import AuthService from '../services/user.auth.services';\r\nimport statusCodes from '../helpers/statusCodes';\r\n\r\n/**\r\n *\r\n * @class UserControllers\r\n *\r\n */\r\n\r\nclass UserControllers {\r\n  /**\r\n   *\r\n    * @static\r\n    * @param {*} req\r\n    * @param {*} res\r\n    * @memberof UserControllers\r\n    * @returns {Object} CreatedUser\r\n    */\r\n  static async createUser(req, res) {\r\n    try {\r\n      const data = await AuthService.createUser(req.body);\r\n      if (!data) {\r\n        return res.status(statusCodes.conflict).json(\r\n          {\r\n            status: statusCodes.conflict,\r\n            errors: 'email already registered',\r\n          },\r\n        );\r\n      }\r\n      return res.status(statusCodes.created).json(\r\n        {\r\n          status: statusCodes.created,\r\n          data,\r\n        },\r\n      );\r\n    } catch (error) {\r\n      return res.status(statusCodes.serverError).json(\r\n        {\r\n          error: 'Internal server error',\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @param {*} req\r\n    * @param {*} res\r\n    * @memberof UserControllers\r\n    * @returns {Object} loginUser\r\n    */\r\n  static async loginUser(req, res) {\r\n    try {\r\n      const data = await AuthService.login(req.body);\r\n      if (!data) {\r\n        return res.status(statusCodes.unAuthorized).json(\r\n          {\r\n            status: statusCodes.unAuthorized,\r\n            error: 'Invalid email or password',\r\n          },\r\n        );\r\n      }\r\n      return res.status(statusCodes.success).json(\r\n        {\r\n          status: statusCodes.success,\r\n          data,\r\n        },\r\n      );\r\n    } catch (error) {\r\n      return res.status(statusCodes.serverError).json({ error: 'Internal Server Error' });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserControllers;\r\n"],"file":"users.auth.controllers.js"}