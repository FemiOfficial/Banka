{"version":3,"sources":["../../server/controllers/transactions.controllers.js"],"names":["TransactionControllers","req","res","TransactionServices","makeDebitTransaction","params","accountNumber","body","data","status","statusCodes","notFound","json","errors","success","serverError","error","makeCreditTransaction"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;;;;IAMMA,sB;;;;;;;;;;AACJ;;;;;;;;;;;oDAQ0BC,G,EAAKC,G;;;;;;;;uBAERC,wBAAoBC,oBAApB,CAAyCH,GAAG,CAACI,MAAJ,CAAWC,aAApD,EAAmEL,GAAG,CAACM,IAAvE,C;;;AAAbC,gBAAAA,I;;oBACDA,I;;;;;iDACIN,GAAG,CAACO,MAAJ,CAAWC,wBAAYC,QAAvB,EAAiCC,IAAjC,CAAsC;AAC3CH,kBAAAA,MAAM,EAAEC,wBAAYC,QADuB;AAE3CE,kBAAAA,MAAM,EAAE;AAFmC,iBAAtC,C;;;iDAMFX,GAAG,CAACO,MAAJ,CAAWC,wBAAYI,OAAvB,EAAgCF,IAAhC,CACL;AACEH,kBAAAA,MAAM,EAAEC,wBAAYI,OADtB;AAEEN,kBAAAA,IAAI,EAAJA;AAFF,iBADK,C;;;;;iDAOAN,GAAG,CAACO,MAAJ,CAAWC,wBAAYK,WAAvB,EAAoCH,IAApC,CACL;AACEI,kBAAAA,KAAK,EAAE;AADT,iBADK,C;;;;;;;;;;;;;;;;AAQX;;;;;;;;;;;;;;qDAQ2Bf,G,EAAKC,G;;;;;;;;uBAETC,wBAAoBc,qBAApB,CAA0ChB,GAAG,CAACI,MAAJ,CAAWC,aAArD,EAAoEL,GAAG,CAACM,IAAxE,C;;;AAAbC,gBAAAA,I;;oBACDA,I;;;;;kDACIN,GAAG,CAACO,MAAJ,CAAWC,wBAAYC,QAAvB,EAAiCC,IAAjC,CAAsC;AAC3CH,kBAAAA,MAAM,EAAEC,wBAAYC,QADuB;AAE3CE,kBAAAA,MAAM,EAAE;AAFmC,iBAAtC,C;;;kDAMFX,GAAG,CAACO,MAAJ,CAAWC,wBAAYI,OAAvB,EAAgCF,IAAhC,CACL;AACEH,kBAAAA,MAAM,EAAEC,wBAAYI,OADtB;AAEEN,kBAAAA,IAAI,EAAJA;AAFF,iBADK,C;;;;;kDAOAN,GAAG,CAACO,MAAJ,CAAWC,wBAAYK,WAAvB,EAAoCH,IAApC,CACL;AACEI,kBAAAA,KAAK,EAAE;AADT,iBADK,C;;;;;;;;;;;;;;;;;;;;eAUEhB,sB","sourcesContent":["import TransactionServices from '../services/transaction.services';\r\nimport statusCodes from '../helpers/statusCodes';\r\n\r\n/**\r\n *\r\n * @class TransactionControllers\r\n *\r\n */\r\n\r\nclass TransactionControllers {\r\n  /**\r\n   *\r\n    * @static\r\n    * @param {*} req\r\n    * @param {*} res\r\n    * @memberof TransactionControllers\r\n    * @returns {Object} debitedAccount\r\n    */\r\n  static async debitAccount(req, res) {\r\n    try {\r\n      const data = await TransactionServices.makeDebitTransaction(req.params.accountNumber, req.body);\r\n      if (!data) {\r\n        return res.status(statusCodes.notFound).json({\r\n          status: statusCodes.notFound,\r\n          errors: 'account not found',\r\n        });\r\n      }\r\n\r\n      return res.status(statusCodes.success).json(\r\n        {\r\n          status: statusCodes.success,\r\n          data,\r\n        },\r\n      );\r\n    } catch (error) {\r\n      return res.status(statusCodes.serverError).json(\r\n        {\r\n          error: 'Internal server error',\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @param {*} req\r\n    * @param {*} res\r\n    * @memberof TransactionControllers\r\n    * @returns {Object} creditedAccount\r\n    */\r\n  static async creditAccount(req, res) {\r\n    try {\r\n      const data = await TransactionServices.makeCreditTransaction(req.params.accountNumber, req.body);\r\n      if (!data) {\r\n        return res.status(statusCodes.notFound).json({\r\n          status: statusCodes.notFound,\r\n          errors: 'account not found',\r\n        });\r\n      }\r\n\r\n      return res.status(statusCodes.success).json(\r\n        {\r\n          status: statusCodes.success,\r\n          data,\r\n        },\r\n      );\r\n    } catch (error) {\r\n      return res.status(statusCodes.serverError).json(\r\n        {\r\n          error: 'Internal server error',\r\n        },\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default TransactionControllers;\r\n"],"file":"transactions.controllers.js"}