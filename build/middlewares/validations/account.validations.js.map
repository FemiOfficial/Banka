{"version":3,"sources":["../../../server/middlewares/validations/account.validations.js"],"names":["AccountValdation","req","res","next","data","body","errors","status","StatusCodes","badRequest","json","trim","push","length","email","type","balance","accountType","openingBalance","parseFloat"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\nimport StatusCodes from '../../helpers/statusCodes';\r\n/**\r\n *\r\n * @class AccountValdation\r\n * @description Handles all validations on the request body\r\n *\r\n */\r\n\r\nclass AccountValdation {\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AccountValdation\r\n    * @returns {JSON}\r\n    *\r\n    */\r\n  static async checkPatchAccountBody(req, res, next) {\r\n    const data = req.body;\r\n    const errors = [];\r\n    if (!data.status) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors: 'status is required',\r\n      });\r\n    }\r\n\r\n    const status = data.status.trim() == 'active' || data.status.trim() === 'dormant' ? data.status.trim() : false;\r\n\r\n    if (!status) {\r\n      errors.push(`invalid status expecting ${'active'} or ${'dormant'}`);\r\n    }\r\n\r\n    if (errors.length >= 1) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors,\r\n      });\r\n    }\r\n    return next();\r\n  }\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof AccountValdation\r\n    * @returns {JSON}\r\n    *\r\n    */\r\n\r\n  static async checkCreateBankAccountBody(req, res, next) {\r\n    const data = req.body;\r\n    const errors = [];\r\n    if (!data.email) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors: 'user email type is required',\r\n      });\r\n    }\r\n\r\n    if (!data.type) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors: 'account type is required',\r\n      });\r\n    }\r\n    if (!data.balance) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors: 'opening ammount is required',\r\n      });\r\n    }\r\n\r\n    const accountType = data.type.trim();\r\n    const openingBalance = parseFloat(data.balance);\r\n    const type = accountType === 'Savings' || accountType === 'Current' ? accountType : false;\r\n    const balance = openingBalance || false;\r\n    const email = data.email.trim() ? data.email.trim() : false;\r\n\r\n    if (!email || email.length === 0) {\r\n      errors.push('email is required');\r\n    }\r\n    if (!type || accountType.length === 0) {\r\n      errors.push(`account type should be ${'Savings'} or ${'Current'}`);\r\n    }\r\n    if (!balance) {\r\n      errors.push('invalid opening balance, expecting a number');\r\n    }\r\n    if (errors.length >= 1) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors,\r\n      });\r\n    }\r\n    return next();\r\n  }\r\n\r\n}\r\n\r\nexport default AccountValdation;\r\n"],"file":"account.validations.js"}