{"version":3,"sources":["../../../server/middlewares/validations/users.validations.js"],"names":["UsersValidations","req","res","next","data","body","errors","firstName","trim","lastName","email","password","length","push","reg","isValid","test","status","StatusCodes","badRequest","json"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\r\n\r\nimport StatusCodes from '../../helpers/statusCodes';\r\n/**\r\n *\r\n * @class UsersValidations\r\n * @description Handles all validations on the request body\r\n *\r\n */\r\n\r\nclass UsersValidations {\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof UsersValidations\r\n    * @returns {JSON}\r\n    *\r\n    */\r\n  static async checkCreateAccountBody(req, res, next) {\r\n    const data = req.body;\r\n    const errors = [];\r\n\r\n    const firstName = data.firstName ? data.firstName.trim('') : false;\r\n    const lastName = data.lastName ? data.lastName.trim('') : false;\r\n    const email = data.email ? data.email.trim('') : false;\r\n    const password = data.password ? data.password.trim('') : false;\r\n\r\n    if (!firstName || firstName.length === 0) {\r\n      errors.push('firstname is required');\r\n    }\r\n    if (!lastName || lastName.length === 0) {\r\n      errors.push('lastname is required');\r\n    }\r\n    if (!email || email.length === 0) {\r\n      errors.push('email is required');\r\n    }\r\n\r\n    if (email) {\r\n      const reg = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      const isValid = reg.test(data.email);\r\n      if (!isValid) {\r\n        errors.push('Invalid email address');\r\n      }\r\n    }\r\n\r\n    if (!password || password.length === 0) {\r\n      errors.push('password is required');\r\n    }\r\n    if (password) {\r\n      if (!(password.length >= 6 && password.length <= 15)) {\r\n        errors.push('password must be at least 6 and 15 character');\r\n      }\r\n    }\r\n    if (errors.length >= 1) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors,\r\n      });\r\n    }\r\n    return next();\r\n  }\r\n\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof UsersValidations\r\n    * @returns {JSON}\r\n    *\r\n    */\r\n\r\n  static async checkLoginBody(req, res, next) {\r\n    const data = req.body;\r\n    const email = data.email ? data.email.trim('') : false;\r\n    const password = data.password ? data.password.trim('') : false;\r\n    const errors = [];\r\n    if (!email || email.length === 0) {\r\n      errors.push('email is required');\r\n    }\r\n    if (!password || password.length === 0) {\r\n      errors.push('password is required');\r\n    }\r\n    if (errors.length >= 1) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors,\r\n      });\r\n    }\r\n    return next();\r\n  }\r\n}\r\n\r\nexport default UsersValidations;\r\n"],"file":"users.validations.js"}