{"version":3,"sources":["../../../server/middlewares/validations/transactions.validations.js"],"names":["TransactionsValidations","req","res","next","data","body","errors","cashier","status","StatusCodes","badRequest","json","amount","parseFloat","parseInt","push","length"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;IAMMA,uB;;;;;;;;;;AACJ;;;;;;;;;;oDAOmCC,G,EAAKC,G,EAAKC,I;;;;;;AACrCC,gBAAAA,I,GAAOH,GAAG,CAACI,I;AACXC,gBAAAA,M,GAAS,E;;oBAEVF,IAAI,CAACG,O;;;;;iDACDL,GAAG,CAACM,MAAJ,CAAWC,wBAAYC,UAAvB,EAAmCC,IAAnC,CAAwC;AAC7CH,kBAAAA,MAAM,EAAEC,wBAAYC,UADyB;AAE7CJ,kBAAAA,MAAM,EAAE;AAFqC,iBAAxC,C;;;oBAMJF,IAAI,CAACQ,M;;;;;iDACDV,GAAG,CAACM,MAAJ,CAAWC,wBAAYC,UAAvB,EAAmCC,IAAnC,CAAwC;AAC7CH,kBAAAA,MAAM,EAAEC,wBAAYC,UADyB;AAE7CJ,kBAAAA,MAAM,EAAE;AAFqC,iBAAxC,C;;;AAMHM,gBAAAA,M,GAASC,UAAU,CAACT,IAAI,CAACQ,MAAN,EAAc,EAAd,CAAV,GAA8BC,UAAU,CAACT,IAAI,CAACQ,MAAN,EAAc,EAAd,CAAxC,GAA4D,K;AAErEL,gBAAAA,O,GAAUO,QAAQ,CAACV,IAAI,CAACG,OAAN,EAAe,EAAf,CAAR,GAA6BO,QAAQ,CAACV,IAAI,CAACG,OAAN,EAAe,EAAf,CAArC,GAA0D,K;;AAG1E,oBAAI,CAACK,MAAL,EAAa;AACXN,kBAAAA,MAAM,CAACS,IAAP,CAAY,6CAAZ;AACD;;AAED,oBAAI,CAACR,OAAL,EAAc;AACZD,kBAAAA,MAAM,CAACS,IAAP,CAAY,oBAAZ;AACD;;sBACGT,MAAM,CAACU,MAAP,IAAiB,C;;;;;iDACZd,GAAG,CAACM,MAAJ,CAAWC,wBAAYC,UAAvB,EAAmCC,IAAnC,CAAwC;AAC7CH,kBAAAA,MAAM,EAAEC,wBAAYC,UADyB;AAE7CJ,kBAAAA,MAAM,EAANA;AAF6C,iBAAxC,C;;;iDAKFH,IAAI,E;;;;;;;;;;;;;;;;;;;;eAIAH,uB","sourcesContent":["import StatusCodes from '../../helpers/statusCodes';\r\n/**\r\n *\r\n * @class TransactionsValidations\r\n * @description Handles all validations on the request body\r\n *\r\n */\r\nclass TransactionsValidations {\r\n  /**\r\n   *\r\n    * @static\r\n    * @memberof TransactionsValidations\r\n    * @returns {JSON}\r\n    *\r\n    */\r\n  static async checkTransactionsBody(req, res, next) {\r\n    const data = req.body;\r\n    const errors = [];\r\n\r\n    if (!data.cashier) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors: 'cashier is required',\r\n      });\r\n    }\r\n\r\n    if (!data.amount) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors: 'amount is required',\r\n      });\r\n    }\r\n\r\n    const amount = parseFloat(data.amount, 10) ? parseFloat(data.amount, 10) : false;\r\n\r\n    const cashier = parseInt(data.cashier, 10) ? parseInt(data.cashier, 10) : false;\r\n\r\n\r\n    if (!amount) {\r\n      errors.push('transaction amount, expecting a float value');\r\n    }\r\n\r\n    if (!cashier) {\r\n      errors.push('invalid cashier id');\r\n    }\r\n    if (errors.length >= 1) {\r\n      return res.status(StatusCodes.badRequest).json({\r\n        status: StatusCodes.badRequest,\r\n        errors,\r\n      });\r\n    }\r\n    return next();\r\n  }\r\n}\r\n\r\nexport default TransactionsValidations;\r\n"],"file":"transactions.validations.js"}